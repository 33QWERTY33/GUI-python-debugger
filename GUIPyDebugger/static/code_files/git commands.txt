the following syntax will return some form of documentation of whatever you ask it to:
git help <command>

the following command will allow you to start tracking a local codebase on your machine
git init

the following command will allow you to add all current files to a staging area ---> alternatively you can do individual files with 
git add -A ---> git Add filename.ext

the following command will commit files in the staging area into the repository ---> alternatively you can do individual files with ---> to add a message to commit
git commit ---> git commit filename.ext ---> git commit -m "message"

the following command takes all files out of the staging area and puts them back into the working area ---> resets a specific file
git reset ---> git reset filename.ext

the following command gives a log of all actions done in a git repository
git log

the following command lets you clone a remote repository so it can be worked on from different locations by different people
git clone <url or directory> <where to clone>

the following command gives you a list of files in the repository
git ls

the following command tells you info about a git you have on local machine ---> You can also use this to get info about location remotely 
git remote -v ---> git branch -a

the following command shows you changes made to a file
git diff

the following command shows you the status of all of the files, what git area they are in
git status

the following command pulls all changes that have been made in a remote directory while you were working on changes so you can commit changes to the remote dir ---> this pushes changes
git pull origin master ---> git push origin master

the following command creates a branch for easier development on a feature in a large program ---> Allows you to work on specific branch ---> shows a list of all branches
git branch branchName ---> git checkout branchName ---> git branch -a #name with * next to it means the one you are currently working on

the following command lets you push the changes you made to a sub branch to the main branch in staging area
git push -u origin branchName #-u associates two branches with each other

the following command allows you to commit changes to master branch
git checkout master ---> git pull origin master #grabs changes that were made---> git branch --merged #shows merged branches ---> git merge branchName #actually merges sub branch with main branch ---> git push origin master #commits changes to master

the following command lets you delete a branch once the feature it was created for has been implemented
git branch -d branchName #deletes local instance of branch ---> git push origin --delete branchName #deletes the branch from the remote repository

the following command lets you create a git ignore file ---> then place it inside of the staging area
touch .gitignore #this file lets you place files inside that you don't wish to be commited to the repo ---> git add .gitignore

the following command opens an editor to edit commits
git commit --amend

how to move a commit from a branch and move it to another
git log ---> git checkout <desired branch to commit to> ---> git cherry-pick <hash of desired commit> #cherry pick doesn't delete the selected commit, only copies

how to delete bad commit on mistaken branch
git checkout <mistaken branch> ---> git reset --soft <hash of commit you'd like to keep> #resets back to previous commit, but does not delete any work in staging area
**git reset has 3 options --soft, --mixed(default), and --hard soft removes commit and keeps changes in stage area, mixed takes changes out of staging area and removes commit, hard resets all files to state they were in with the given hash

how to get rid of all untracked files
git clean -df #d removes untracked directories, f removes untracked files

the following command shows all commits in the order that you last ran them
git reflog

how to get changes back from a bad hard reset
git reflog ---> git checkout <desired hash to recover> ---> git branch backup #git branch will show you are in a detached HEAD space meaning the space you are in will be garbage collected eventually ---> git checkout master

how to undo changes made on a committed file
git log ---> git revert <hash of commit to revert> #git diff <initial hash> <reverted hash> will show the differences between those two commits

the following command allows you to temporarily stash changes so that you can come back to it later without being forced to commit it
git stash save "message you'd like to see"

the following command will show the stashed items in your repo
git stash list

the following command will reapply stashed changes that were made and keep the stash in the stash list
git stash apply <stash id you can find from the git stash list command>

the following command will reapply the most recent stashed changes and remove the stash from the stash list
git stash pop

the following command will remove a stashed change without applying it
git stash drop <stash id>

the following command will remove all stashed changes in the stash list
git stash clear

